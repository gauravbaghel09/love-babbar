#include <iostream>
using namespace std;
#include<bits/stdc++.h>
#include<unordered_map>
#include<list>
#include<queue>
#include<vector>

class graph{
  public:
  unordered_map<int,list<int>>adjList;

  void addEdge(int u,int v,bool direction){
    //dirction = 0 -> undirected graph
    //direction = 1 -> directed graph
    //create a edge from v to u
    adjList[u].push_back(v);
    if(direction == 0){
      //undirected edge
      //create a edge from u to v 
      adjList[v].push_back(u);
    }
  }
void printAdjList(){
  for(auto node:adjList){
    cout<<node.first<<"->";
    for(auto nei : node.second){
      cout<<nei<<",";
    }
    cout<<endl;
  }
}
void bfs(int src,unordered_map<int,bool>&visited){
  queue<int>q;
  // unordered_map<int,bool>visited;
  
  q.push(src);
  visited[src]=true;
  
  while(!q.empty()){
    int frontNode = q.front();
    q.pop();
    cout<<frontNode<<",";
    
    //insert neighbours
    for(auto neighbour:adjList[frontNode]){
      if(!visited[neighbour]) {
        q.push(neighbour);
        visited[neighbour]=true;      
      }
    }
    
  }
 }

void dfs(int src,unordered_map<int,bool>&visited){
  cout<<src<<",";
  visited[src]=true;
  for(auto neighbour:adjList[src]){
    if(!visited[neighbour]){
      dfs(neighbour,visited);
    }
  }
}
bool checkCycleusingBfs(int src,unordered_map<int,bool>&visited){
  queue<int>q;
  unordered_map<int,int>parent;
  q.push(src);
  visited[src]=true;
  parent[src]=-1;
  while(!q.empty()){
    int frontNode = q.front();
    q.pop();
    for(auto nbr:adjList[frontNode]){
      if(!visited[nbr]){
        q.push(nbr);
        visited[nbr]=true;
        parent[nbr]=frontNode;
        
      }
      if(visited[nbr] && nbr != parent[frontNode]){
        //cycle present
        return true;
      }
    }
  }
  return false;
}
bool checkCycleusingDfs(int src,unordered_map<int,bool>&visited,int parent){
  visited[src]=true;
  for(auto nbr:adjList[src]){
    if(!visited[nbr]){
      bool checkAns = checkCycleusingDfs(nbr,visited,src);
      if(checkAns == true)
        return true;
    }
    if(visited[nbr] && nbr != parent){
      //cycle present 
      return true;
    }
  }
  return false;
}
bool checkCyclicDirectedGraphUsingDfs(int src,unordered_map<int,bool>&visited,unordered_map<int,bool>DfsVisited){
    visited[src]=true;
    DfsVisited[src]=true;

  for(auto nbr:adjList[src]){
    if(!visited[nbr]){
      bool Ans = checkCyclicDirectedGraphUsingDfs(nbr,visited,DfsVisited);
      if(Ans == true)
        return true;
    }
    if(visited[nbr] == true && DfsVisited[nbr] == true)
      return true;
  }
  DfsVisited[src]=false;
  return false;
  
}
};
int main() {

  graph g;
  int n =5;
  g.addEdge(0,1,1);
  g.addEdge(1,2,1);
  g.addEdge(2,3,1);
  g.addEdge(3,4,1);
  g.addEdge(4,0,1);
  
  g.printAdjList();
  cout<<endl; 
  bool ans = false;
  unordered_map<int,bool>visited;
  unordered_map<int,bool>Dfsvisited;
  for(int i=0;i<n;i++){
    ans = g.checkCyclicDirectedGraphUsingDfs(i,visited,Dfsvisited);
    if(ans == true){
      break;
    }
  }
  if(ans == true){
    cout<<"cycle is present "<<endl;
  }else{
    cout<<"cycle Absent"<<endl;
  }

  // cout<<"undirected cycle using BFS"<<endl;
  // unordered_map<int,bool>visited;
  // bool ans = false;
  // for(int i = 0;i <n;i++){
  //   if(!visited[i]){
  //     ans = g.checkCycleusingBfs(i,visited);
  //     if(ans == true)
  //       break;
  //   }
  // }
  // if(ans == true)
  //   cout<<"cycle is present";
  // else
  //   cout<<"cycle is not present";
  // cout<<endl;
  // unordered_map<int,bool>visitedDfs;
  // bool ansDfs = false;
  // for(int i = 0;i <n;i++){
  //   if(!visitedDfs[i]){
  //     ansDfs= g.checkCycleusingDfs(i,visitedDfs,-1);
  //     if(ansDfs == true)
  //       break;
  //   }
  // }
  // cout<<"undirected cycle using DFS"<<endl;
  // if(ansDfs == true)
  //   cout<<"cycle is present";
  // else
  //   cout<<"cyclr is not present";
  
  // cout<<"print bfs traversal"<<endl;
  // unordered_map<int,bool>visited;
  // for(int i =0; i<n;i++){
  //   if(!visited[i]){
  //     g.bfs(i,visited);
  //   }
    
  // }
  // cout<<endl;
  // cout<<"print dfs Traversal"<<endl;
  // unordered_map<int,bool>visited2;
  // for(int i = 0;i<=n;i++){
  //   if(!visited2[i]){
  //     g.dfs(i,visited2);
  //   }
  // }
  
  


  
  //g.addEdge(srcNode,destNode,weight,direction);
  // g.addEdge(0,1,8,0);
  // g.addEdge(1,2,5,0);
  // g.addEdge(0,2,4,0);
  // cout<<endl;
  // g.printAdjList();



  // int n;
  // cout<<"enter the number of nodes:"<<endl;
  // cin>>n;
  // vector<vector<int>>adj(n,vector<int>(n,0));
  // int e ;
  // cout<<"enter the number of egde:"<<endl;
  // cin>>e;
  // for(int i = 0; i < e;i++){
  //   int u,v;
  //   cin>>u>>v;
  //   //mark1 
  //   adj[u][v]=1;
  // }
  // //printing 
  // for(int i =0; i < n; i++){
  //   for(int j= 0;j<n;j++){
  //     cout<<adj[i][j]<<" ";
  //   }
  //   cout<<endl;
  // }

}
